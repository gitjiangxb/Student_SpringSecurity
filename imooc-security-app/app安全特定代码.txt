二、使用Spring Social开发第三方登录
	1、OAuth协议简介
		OAuth协议要解决的问题
			Token
		OAuth协议中的各种角色
			服务提供商(Provider)：提供令牌(Token)，谁提供令牌谁就是服务提供商(如微信)
				认证服务器(Authorization Server)：作用——认证用户的身份并且产生令牌
				资源服务器(Resource Server)：作用——保存用户的资源(自拍数据)；验证令牌
			资源所有者(Resource Owner)：资源指用户的自拍数据，自拍数据真正的所有者是用户而不是微信，(用户)
			第三方应用(Client)：把微信的用户变成他的用户
		OAuth协议运行流程
			如图[项目笔记]：
			在运行流程中，第二步的“同意授权”很重要：
				OAuth协议中的授权模式：
					授权码模式(authorization code)__是这几种中功能最完整、流程最严密的模式：流程如图[项目笔记]
						两个特点：
							①、用户同意授权的这个动作是在认证服务器上完成的；而其他的模式是在第三方应用上完成的，然后再发送给认证服务器(注意：第三方可以伪造认证信息)。
							②、用户同意授权到认证服务器上，认证服务器返回给第三方的时候携带的是授权码而不是最后的Token，第三方收到后需要再发一个请求给认证服务器用授权码去换真正的令牌(Token),然后发给第三方应用的服务器。
					密码模式(resource owner password credentials)：
					客户端模式(client credentials)：
					简化模式(implicit)：
	2、Spring Social基本原理
		存在的目的：它实际上是一个授权协议，目的是让用户在不将服务提供商的用户名/密码交给第三方应用的情况下，让第三方应用有权限去访问用户保存在服务提供商上面的资源(数据)
		逻辑流程如图[项目笔记]：
		代码流程如下：
			DB					UserConnectionRepository			ServiceProvider
			UserConnection		(JdbsUsersConnectionRepository)		(AbstractOAuth2ServiceProvider)
																					
								Connection								OAuth2Operations
								(OAuth2Connection)						(Oauth2Template)
																						
								ConnectionFactory						Api
								(OAuth2ConnectionFactory)				(AbstractOAuth2ApiBinding)
																					
									ServiceProvider
										
									ApiAdapter
										
		说明：
			ServiceProvider	：服务提供商						
			(AbstractOAuth2ServiceProvider)	：服务提供商 提供的 抽象类(不管是QQ还是微信的服务提供商，只需要继承这个抽象类)		
				结合逻辑流程图看：第一步到第五步是一个标准的流程(OAuth协议的流程)，而第六步是一个个性化的流程(每一个服务提供商所提供的用户信息的数据结构都是不一样的)，因此存在两个封装：
					OAuth2Operations ：OAuth协议相关的一些操作，这个接口封装了第一步到第五步				
					(Oauth2Template) ：Spring Social提供的默认实现	
					
					Api	： 需要自己去写一个接口，来封装用户信息；也就是第六步 				
					(AbstractOAuth2ApiBinding)						
			接下去跟第七步相关的类：
				Connection ：封装前六步获取到的用户信息，它是由ConnectionFactory创建出来的，							
				(OAuth2Connection)							
											
				ConnectionFactory：这个工厂负责创建Connection实例，也就是包含了用户信息的对象；要想获取到用户信息的对象，就必须要走前面的流程(第一步到第六步)，因此它包含一个ServiceProvider
				(OAuth2ConnectionFactory)	 
					ServiceProvider：封装整个右边，然后放到这个实例里面
					ApiAdapter：负责把不同服务商提供的不同结构的数据(用户信息)转换成Connection标准的数据结构，就需要用到这个接口
				业务系统里面的用户信息(一般是存在数据库User表里面)如何和服务提供商的用户信息关联在一起？换句话说就是服务提供商里面的A用户，如何对应到张三这个用户；当张三登录如何判断是A用户登录了？
					这个对应关系是怎么建立的？在Spring Social里面这个对应关系是存在数据库里面的，数据库里面有一张UserConnection表，这个表里存储了你业务系统中User表中的ID和服务提供商的Connection之间的对应关系；
					那么由谁来操作这个UserConnection这张表啦？由UserConnectionRepository来操作。
						
						UserConnectionRepository：存储器
						(JdbcUsersConnectionRepository)：实现类，作用：针对数据库里面的UserConnection表做一些增删改查操作 
						
						

开发QQ登录：
	1、创建一个新包：com.imooc.security.core.social.qq.api
	2、创建一个QQ登录接口：QQ，返回用户信息(需要自定义一个QQ登录用户信息实体)
	3、创建一个QQ登录接口实现类：QQimpl,需要继承AbstractOAuth2ApiBinding
		class QQimpl extends AbstractOAuth2ApiBinding implements QQ {...}
		因为这是自定义接口去实现封装用户信息，因此需要继承AbstractOAuth2ApiBinding
	4、创建QQ用户实体：QQUserInfo
	5、查看QQ互联文档：http://wiki.connect.qq.com/get_user_info
	
	完成以上步骤，就完成了第六步“获取用户信息”Api的编写，
	目前暂时利用OAuth2Operations默认的接口。
	接下去创建ServiceProvider(完成第一步到第五步)
	6、创建一个新包：com.imooc.security.core.social.qq.connet
	7、创建自定义的服务提供商：QQServiceProvider
		注意：它需要两部分
			当它需要OAuth2Operations，我
		  		new OAuth2Template(appId, appSecret, URL_AUTHORIZE, URL_ACCESSTOKEN)
		   	当它需要Api，我
		   		new QQimpl(accessToken, appId);
	到这里为止 跟ServiceProvider(服务提供商)相关的代码就完成了。







			